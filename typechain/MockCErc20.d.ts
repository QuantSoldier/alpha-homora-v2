/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockCErc20Interface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowBalanceCurrent(address)": FunctionFragment;
    "borrowBalanceStored(address)": FunctionFragment;
    "borrows(address)": FunctionFragment;
    "interestPerYear()": FunctionFragment;
    "lastBlock(address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "repayBorrow(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "borrows", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastBlock", values: [string]): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {};
}

export class MockCErc20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockCErc20Interface;

  functions: {
    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(uint256)"(
      borrowAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrowBalanceCurrent(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "borrowBalanceStored(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrows(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    "interestPerYear()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastBlock(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      mintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      redeemTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayBorrow(uint256)"(
      repayAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: Overrides): Promise<ContractTransaction>;

    "underlying()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    borrowAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(uint256)"(
    borrowAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrowBalanceCurrent(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowBalanceStored(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "borrowBalanceStored(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "borrows(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  "interestPerYear()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastBlock(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    mintAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    mintAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeem(
    redeemTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    redeemTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayBorrow(
    repayAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayBorrow(uint256)"(
    repayAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: Overrides): Promise<ContractTransaction>;

  "underlying()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalanceCurrent(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalanceStored(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "borrows(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPerYear()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      mintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      mintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayBorrow(uint256)"(
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      borrowAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrowBalanceCurrent(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowBalanceStored(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "borrows(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    "interestPerYear()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(mintAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "mint(uint256)"(
      mintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      redeemTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repayBorrow(uint256)"(
      repayAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: Overrides): Promise<BigNumber>;

    "underlying()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(uint256)"(
      borrowAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrowBalanceCurrent(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowBalanceStored(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrows(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrows(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestPerYear()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastBlock(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      mintAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      redeemTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayBorrow(uint256)"(
      repayAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: Overrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
