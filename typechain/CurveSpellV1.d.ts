/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CurveSpellV1Interface extends ethers.utils.Interface {
  functions: {
    "addLiquidity2(address,uint256[2],uint256,uint256[2],uint256,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidity3(address,uint256[3],uint256,uint256[3],uint256,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidity4(address,uint256[4],uint256,uint256[4],uint256,uint256,uint256,uint256)": FunctionFragment;
    "approved(address,address)": FunctionFragment;
    "bank()": FunctionFragment;
    "crv()": FunctionFragment;
    "ensureApprove(address,address)": FunctionFragment;
    "ensureApproveN(address,uint256)": FunctionFragment;
    "getPool(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "poolOf(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeLiquidity2(address,uint256,uint256,uint256[2],uint256,uint256[2])": FunctionFragment;
    "removeLiquidity3(address,uint256,uint256,uint256[3],uint256,uint256[3])": FunctionFragment;
    "removeLiquidity4(address,uint256,uint256,uint256[4],uint256,uint256[4])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ulTokens(address,uint256)": FunctionFragment;
    "werc20()": FunctionFragment;
    "weth()": FunctionFragment;
    "wgauge()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity2",
    values: [
      string,
      [BigNumberish, BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity3",
    values: [
      string,
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity4",
    values: [
      string,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ensureApprove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureApproveN",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [string]): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "poolOf", values: [string]): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity2",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity3",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity4",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ulTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "werc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "wgauge", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureApproveN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ulTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "werc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wgauge", data: BytesLike): Result;

  events: {};
}

export class CurveSpellV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CurveSpellV1Interface;

  functions: {
    addLiquidity2(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity2(address,uint256[2],uint256,uint256[2],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addLiquidity3(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity3(address,uint256[3],uint256,uint256[3],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addLiquidity4(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity4(address,uint256[4],uint256,uint256[4],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bank(overrides?: CallOverrides): Promise<[string]>;

    "bank()"(overrides?: CallOverrides): Promise<[string]>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    "crv()"(overrides?: CallOverrides): Promise<[string]>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ensureApproveN(
      lp: string,
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ensureApproveN(address,uint256)"(
      lp: string,
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPool(lp: string, overrides?: Overrides): Promise<ContractTransaction>;

    "getPool(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvest(overrides?: Overrides): Promise<ContractTransaction>;

    "harvest()"(overrides?: Overrides): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    poolOf(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "poolOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity2(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "removeLiquidity2(address,uint256,uint256,uint256[2],uint256,uint256[2])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    removeLiquidity3(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "removeLiquidity3(address,uint256,uint256,uint256[3],uint256,uint256[3])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    removeLiquidity4(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "removeLiquidity4(address,uint256,uint256,uint256[4],uint256,uint256[4])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    werc20(overrides?: CallOverrides): Promise<[string]>;

    "werc20()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    wgauge(overrides?: CallOverrides): Promise<[string]>;

    "wgauge()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity2(
    lp: string,
    amtsUser: [BigNumberish, BigNumberish],
    amtLPUser: BigNumberish,
    amtsBorrow: [BigNumberish, BigNumberish],
    amtLPBorrow: BigNumberish,
    minLPMint: BigNumberish,
    pid: BigNumberish,
    gid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity2(address,uint256[2],uint256,uint256[2],uint256,uint256,uint256,uint256)"(
    lp: string,
    amtsUser: [BigNumberish, BigNumberish],
    amtLPUser: BigNumberish,
    amtsBorrow: [BigNumberish, BigNumberish],
    amtLPBorrow: BigNumberish,
    minLPMint: BigNumberish,
    pid: BigNumberish,
    gid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addLiquidity3(
    lp: string,
    amtsUser: [BigNumberish, BigNumberish, BigNumberish],
    amtLPUser: BigNumberish,
    amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
    amtLPBorrow: BigNumberish,
    minLPMint: BigNumberish,
    pid: BigNumberish,
    gid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity3(address,uint256[3],uint256,uint256[3],uint256,uint256,uint256,uint256)"(
    lp: string,
    amtsUser: [BigNumberish, BigNumberish, BigNumberish],
    amtLPUser: BigNumberish,
    amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
    amtLPBorrow: BigNumberish,
    minLPMint: BigNumberish,
    pid: BigNumberish,
    gid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addLiquidity4(
    lp: string,
    amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    amtLPUser: BigNumberish,
    amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    amtLPBorrow: BigNumberish,
    minLPMint: BigNumberish,
    pid: BigNumberish,
    gid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity4(address,uint256[4],uint256,uint256[4],uint256,uint256,uint256,uint256)"(
    lp: string,
    amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    amtLPUser: BigNumberish,
    amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    amtLPBorrow: BigNumberish,
    minLPMint: BigNumberish,
    pid: BigNumberish,
    gid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  approved(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approved(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bank(overrides?: CallOverrides): Promise<string>;

  "bank()"(overrides?: CallOverrides): Promise<string>;

  crv(overrides?: CallOverrides): Promise<string>;

  "crv()"(overrides?: CallOverrides): Promise<string>;

  ensureApprove(
    token: string,
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ensureApprove(address,address)"(
    token: string,
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ensureApproveN(
    lp: string,
    n: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ensureApproveN(address,uint256)"(
    lp: string,
    n: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPool(lp: string, overrides?: Overrides): Promise<ContractTransaction>;

  "getPool(address)"(
    lp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvest(overrides?: Overrides): Promise<ContractTransaction>;

  "harvest()"(overrides?: Overrides): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  poolOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  "poolOf(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  removeLiquidity2(
    lp: string,
    amtLPTake: BigNumberish,
    amtLPWithdraw: BigNumberish,
    amtsRepay: [BigNumberish, BigNumberish],
    amtLPRepay: BigNumberish,
    amtsMin: [BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "removeLiquidity2(address,uint256,uint256,uint256[2],uint256,uint256[2])"(
    lp: string,
    amtLPTake: BigNumberish,
    amtLPWithdraw: BigNumberish,
    amtsRepay: [BigNumberish, BigNumberish],
    amtLPRepay: BigNumberish,
    amtsMin: [BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  removeLiquidity3(
    lp: string,
    amtLPTake: BigNumberish,
    amtLPWithdraw: BigNumberish,
    amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
    amtLPRepay: BigNumberish,
    amtsMin: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "removeLiquidity3(address,uint256,uint256,uint256[3],uint256,uint256[3])"(
    lp: string,
    amtLPTake: BigNumberish,
    amtLPWithdraw: BigNumberish,
    amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
    amtLPRepay: BigNumberish,
    amtsMin: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  removeLiquidity4(
    lp: string,
    amtLPTake: BigNumberish,
    amtLPWithdraw: BigNumberish,
    amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    amtLPRepay: BigNumberish,
    amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "removeLiquidity4(address,uint256,uint256,uint256[4],uint256,uint256[4])"(
    lp: string,
    amtLPTake: BigNumberish,
    amtLPWithdraw: BigNumberish,
    amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    amtLPRepay: BigNumberish,
    amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ulTokens(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "ulTokens(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  werc20(overrides?: CallOverrides): Promise<string>;

  "werc20()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  wgauge(overrides?: CallOverrides): Promise<string>;

  "wgauge()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity2(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity2(address,uint256[2],uint256,uint256[2],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity3(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity3(address,uint256[3],uint256,uint256[3],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity4(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity4(address,uint256[4],uint256,uint256[4],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bank(overrides?: CallOverrides): Promise<string>;

    "bank()"(overrides?: CallOverrides): Promise<string>;

    crv(overrides?: CallOverrides): Promise<string>;

    "crv()"(overrides?: CallOverrides): Promise<string>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ensureApproveN(
      lp: string,
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ensureApproveN(address,uint256)"(
      lp: string,
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPool(lp: string, overrides?: CallOverrides): Promise<string>;

    "getPool(address)"(lp: string, overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    poolOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    "poolOf(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    removeLiquidity2(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity2(address,uint256,uint256,uint256[2],uint256,uint256[2])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity3(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity3(address,uint256,uint256,uint256[3],uint256,uint256[3])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity4(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity4(address,uint256,uint256,uint256[4],uint256,uint256[4])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    werc20(overrides?: CallOverrides): Promise<string>;

    "werc20()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    wgauge(overrides?: CallOverrides): Promise<string>;

    "wgauge()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidity2(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity2(address,uint256[2],uint256,uint256[2],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addLiquidity3(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity3(address,uint256[3],uint256,uint256[3],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addLiquidity4(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity4(address,uint256[4],uint256,uint256[4],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bank(overrides?: CallOverrides): Promise<BigNumber>;

    "bank()"(overrides?: CallOverrides): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    "crv()"(overrides?: CallOverrides): Promise<BigNumber>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ensureApproveN(
      lp: string,
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ensureApproveN(address,uint256)"(
      lp: string,
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPool(lp: string, overrides?: Overrides): Promise<BigNumber>;

    "getPool(address)"(lp: string, overrides?: Overrides): Promise<BigNumber>;

    harvest(overrides?: Overrides): Promise<BigNumber>;

    "harvest()"(overrides?: Overrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    poolOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity2(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "removeLiquidity2(address,uint256,uint256,uint256[2],uint256,uint256[2])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    removeLiquidity3(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "removeLiquidity3(address,uint256,uint256,uint256[3],uint256,uint256[3])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    removeLiquidity4(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "removeLiquidity4(address,uint256,uint256,uint256[4],uint256,uint256[4])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    werc20(overrides?: CallOverrides): Promise<BigNumber>;

    "werc20()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    wgauge(overrides?: CallOverrides): Promise<BigNumber>;

    "wgauge()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity2(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity2(address,uint256[2],uint256,uint256[2],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity3(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity3(address,uint256[3],uint256,uint256[3],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity4(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity4(address,uint256[4],uint256,uint256[4],uint256,uint256,uint256,uint256)"(
      lp: string,
      amtsUser: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPUser: BigNumberish,
      amtsBorrow: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPBorrow: BigNumberish,
      minLPMint: BigNumberish,
      pid: BigNumberish,
      gid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ensureApproveN(
      lp: string,
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ensureApproveN(address,uint256)"(
      lp: string,
      n: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPool(lp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "getPool(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "harvest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    poolOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity2(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity2(address,uint256,uint256,uint256[2],uint256,uint256[2])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity3(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity3(address,uint256,uint256,uint256[3],uint256,uint256[3])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity4(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity4(address,uint256,uint256,uint256[4],uint256,uint256[4])"(
      lp: string,
      amtLPTake: BigNumberish,
      amtLPWithdraw: BigNumberish,
      amtsRepay: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      amtLPRepay: BigNumberish,
      amtsMin: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    werc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "werc20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wgauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wgauge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
