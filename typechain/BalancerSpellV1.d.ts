/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BalancerSpellV1Interface extends ethers.utils.Interface {
  functions: {
    "addLiquidityWERC20(address,tuple)": FunctionFragment;
    "addLiquidityWStakingRewards(address,tuple,address)": FunctionFragment;
    "approved(address,address)": FunctionFragment;
    "bank()": FunctionFragment;
    "ensureApprove(address,address)": FunctionFragment;
    "getPair(address)": FunctionFragment;
    "harvestWStakingRewards(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "removeLiquidityWERC20(address,tuple)": FunctionFragment;
    "removeLiquidityWStakingRewards(address,tuple,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "werc20()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidityWERC20",
    values: [
      string,
      {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityWStakingRewards",
    values: [
      string,
      {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ensureApprove",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPair", values: [string]): string;
  encodeFunctionData(
    functionFragment: "harvestWStakingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWERC20",
    values: [
      string,
      {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWStakingRewards",
    values: [
      string,
      {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "werc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidityWERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityWStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestWStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "werc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class BalancerSpellV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BalancerSpellV1Interface;

  functions: {
    addLiquidityWERC20(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bank(overrides?: CallOverrides): Promise<[string]>;

    "bank()"(overrides?: CallOverrides): Promise<[string]>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPair(lp: string, overrides?: Overrides): Promise<ContractTransaction>;

    "getPair(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvestWStakingRewards(
      wstaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvestWStakingRewards(address)"(
      wstaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityWERC20(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    werc20(overrides?: CallOverrides): Promise<[string]>;

    "werc20()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidityWERC20(
    lp: string,
    amt: {
      amtAUser: BigNumberish;
      amtBUser: BigNumberish;
      amtLPUser: BigNumberish;
      amtABorrow: BigNumberish;
      amtBBorrow: BigNumberish;
      amtLPBorrow: BigNumberish;
      amtLPDesired: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityWERC20(address,tuple)"(
    lp: string,
    amt: {
      amtAUser: BigNumberish;
      amtBUser: BigNumberish;
      amtLPUser: BigNumberish;
      amtABorrow: BigNumberish;
      amtBBorrow: BigNumberish;
      amtLPBorrow: BigNumberish;
      amtLPDesired: BigNumberish;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addLiquidityWStakingRewards(
    lp: string,
    amt: {
      amtAUser: BigNumberish;
      amtBUser: BigNumberish;
      amtLPUser: BigNumberish;
      amtABorrow: BigNumberish;
      amtBBorrow: BigNumberish;
      amtLPBorrow: BigNumberish;
      amtLPDesired: BigNumberish;
    },
    wstaking: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidityWStakingRewards(address,tuple,address)"(
    lp: string,
    amt: {
      amtAUser: BigNumberish;
      amtBUser: BigNumberish;
      amtLPUser: BigNumberish;
      amtABorrow: BigNumberish;
      amtBBorrow: BigNumberish;
      amtLPBorrow: BigNumberish;
      amtLPDesired: BigNumberish;
    },
    wstaking: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  approved(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approved(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bank(overrides?: CallOverrides): Promise<string>;

  "bank()"(overrides?: CallOverrides): Promise<string>;

  ensureApprove(
    token: string,
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ensureApprove(address,address)"(
    token: string,
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPair(lp: string, overrides?: Overrides): Promise<ContractTransaction>;

  "getPair(address)"(
    lp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvestWStakingRewards(
    wstaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvestWStakingRewards(address)"(
    wstaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityWERC20(
    lp: string,
    amt: {
      amtLPTake: BigNumberish;
      amtLPWithdraw: BigNumberish;
      amtARepay: BigNumberish;
      amtBRepay: BigNumberish;
      amtLPRepay: BigNumberish;
      amtAMin: BigNumberish;
      amtBMin: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityWERC20(address,tuple)"(
    lp: string,
    amt: {
      amtLPTake: BigNumberish;
      amtLPWithdraw: BigNumberish;
      amtARepay: BigNumberish;
      amtBRepay: BigNumberish;
      amtLPRepay: BigNumberish;
      amtAMin: BigNumberish;
      amtBMin: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityWStakingRewards(
    lp: string,
    amt: {
      amtLPTake: BigNumberish;
      amtLPWithdraw: BigNumberish;
      amtARepay: BigNumberish;
      amtBRepay: BigNumberish;
      amtLPRepay: BigNumberish;
      amtAMin: BigNumberish;
      amtBMin: BigNumberish;
    },
    wstaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityWStakingRewards(address,tuple,address)"(
    lp: string,
    amt: {
      amtLPTake: BigNumberish;
      amtLPWithdraw: BigNumberish;
      amtARepay: BigNumberish;
      amtBRepay: BigNumberish;
      amtLPRepay: BigNumberish;
      amtAMin: BigNumberish;
      amtBMin: BigNumberish;
    },
    wstaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  werc20(overrides?: CallOverrides): Promise<string>;

  "werc20()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidityWERC20(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bank(overrides?: CallOverrides): Promise<string>;

    "bank()"(overrides?: CallOverrides): Promise<string>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPair(
      lp: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { tokenA: string; tokenB: string }>;

    "getPair(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { tokenA: string; tokenB: string }>;

    harvestWStakingRewards(
      wstaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestWStakingRewards(address)"(
      wstaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeLiquidityWERC20(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    werc20(overrides?: CallOverrides): Promise<string>;

    "werc20()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidityWERC20(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bank(overrides?: CallOverrides): Promise<BigNumber>;

    "bank()"(overrides?: CallOverrides): Promise<BigNumber>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPair(lp: string, overrides?: Overrides): Promise<BigNumber>;

    "getPair(address)"(lp: string, overrides?: Overrides): Promise<BigNumber>;

    harvestWStakingRewards(
      wstaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvestWStakingRewards(address)"(
      wstaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityWERC20(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    werc20(overrides?: CallOverrides): Promise<BigNumber>;

    "werc20()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidityWERC20(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtAUser: BigNumberish;
        amtBUser: BigNumberish;
        amtLPUser: BigNumberish;
        amtABorrow: BigNumberish;
        amtBBorrow: BigNumberish;
        amtLPBorrow: BigNumberish;
        amtLPDesired: BigNumberish;
      },
      wstaking: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    approved(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approved(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ensureApprove(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ensureApprove(address,address)"(
      token: string,
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPair(lp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "getPair(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvestWStakingRewards(
      wstaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvestWStakingRewards(address)"(
      wstaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityWERC20(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityWERC20(address,tuple)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityWStakingRewards(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityWStakingRewards(address,tuple,address)"(
      lp: string,
      amt: {
        amtLPTake: BigNumberish;
        amtLPWithdraw: BigNumberish;
        amtARepay: BigNumberish;
        amtBRepay: BigNumberish;
        amtLPRepay: BigNumberish;
        amtAMin: BigNumberish;
        amtBMin: BigNumberish;
      },
      wstaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    werc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "werc20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
