/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TripleSlopeModel } from "../TripleSlopeModel";

export class TripleSlopeModel__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TripleSlopeModel> {
    return super.deploy(overrides || {}) as Promise<TripleSlopeModel>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TripleSlopeModel {
    return super.attach(address) as TripleSlopeModel;
  }
  connect(signer: Signer): TripleSlopeModel__factory {
    return super.connect(signer) as TripleSlopeModel__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TripleSlopeModel {
    return new Contract(address, _abi, signerOrProvider) as TripleSlopeModel;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "debt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "floating",
        type: "uint256",
      },
    ],
    name: "getInterestRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610401806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c6dfa13f14610030575b600080fd5b6100536004803603604081101561004657600080fd5b5080359060200135610065565b60408051918252519081900360200190f35b6000806100728484610170565b905060006100938261008d8768056bc75e2d631000006101d1565b9061022a565b90506804563918244f4000008110156100db576301e133806100ca6804563918244f40000061008d8467016345785d8a00006101d1565b816100d157fe5b049250505061016a565b6804e1003b28d92800008110156100ff576301e1338067016345785d8a00006100d1565b68056bc75e2d63100000811015610157576301e13380610146678ac7230489e8000061008d67058d15e176280000610140866804e1003b28d928000061026c565b906101d1565b67016345785d8a000001816100d157fe5b6301e133806706f05b59d3b200006100d1565b92915050565b6000828201838110156101ca576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000826101e05750600061016a565b828202828482816101ed57fe5b04146101ca5760405162461bcd60e51b81526004018080602001828103825260218152602001806103ab6021913960400191505060405180910390fd5b60006101ca83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506102ae565b60006101ca83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610350565b6000818361033a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102ff5781810151838201526020016102e7565b50505050905090810190601f16801561032c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161034657fe5b0495945050505050565b600081848411156103a25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156102ff5781810151838201526020016102e7565b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220106e41af6771742e5b7efeb5c587dcccab4f044b73df6ca0a7354df15f6bdb0a64736f6c634300060c0033";
