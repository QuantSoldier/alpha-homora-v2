/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICurvePoolInterface extends ethers.utils.Interface {
  functions: {
    "add_liquidity(uint256[4],uint256)": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "remove_liquidity(uint256,uint256[2])": FunctionFragment;
    "remove_liquidity_imbalance(uint256[4],uint256)": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add_liquidity",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICurvePool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICurvePoolInterface;

  functions: {
    "add_liquidity(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[4])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    remove_liquidity_one_coin(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  "add_liquidity(uint256[4],uint256)"(
    arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[2],uint256)"(
    arg0: [BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[3],uint256)"(
    arg0: [BigNumberish, BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

  "remove_liquidity(uint256,uint256[2])"(
    arg0: BigNumberish,
    arg1: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[4])"(
    arg0: BigNumberish,
    arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[3])"(
    arg0: BigNumberish,
    arg1: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[4],uint256)"(
    arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[3],uint256)"(
    arg0: [BigNumberish, BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity_imbalance(uint256[2],uint256)"(
    arg0: [BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  remove_liquidity_one_coin(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove_liquidity_one_coin(uint256,int128,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    "add_liquidity(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity(uint256,uint256[4])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_imbalance(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_imbalance(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remove_liquidity_one_coin(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "add_liquidity(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    "get_virtual_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[4])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    remove_liquidity_one_coin(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "add_liquidity(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "get_virtual_price()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[4])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[4],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_imbalance(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    remove_liquidity_one_coin(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove_liquidity_one_coin(uint256,int128,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
