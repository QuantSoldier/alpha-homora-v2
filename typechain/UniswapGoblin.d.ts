/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UniswapGoblinInterface extends ethers.utils.Interface {
  functions: {
    "addStrat()": FunctionFragment;
    "balanceToShare(uint256)": FunctionFragment;
    "fToken()": FunctionFragment;
    "factory()": FunctionFragment;
    "getMktSellAmount(uint256,uint256,uint256)": FunctionFragment;
    "health(uint256)": FunctionFragment;
    "liqStrat()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "lpToken()": FunctionFragment;
    "okStrats(address)": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "recover(address,address,uint256)": FunctionFragment;
    "reinvest()": FunctionFragment;
    "reinvestBountyBps()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setCriticalStrategies(address,address)": FunctionFragment;
    "setReinvestBountyBps(uint256)": FunctionFragment;
    "setStrategyOk(address[],bool)": FunctionFragment;
    "shareToBalance(uint256)": FunctionFragment;
    "shares(uint256)": FunctionFragment;
    "staking()": FunctionFragment;
    "totalShare()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uni()": FunctionFragment;
    "weth()": FunctionFragment;
    "work(uint256,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addStrat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceToShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMktSellAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "health",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "liqStrat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "okStrats", values: [string]): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reinvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinvestBountyBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCriticalStrategies",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReinvestBountyBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyOk",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uni", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "work",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addStrat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceToShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMktSellAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "health", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liqStrat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "okStrats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCriticalStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReinvestBountyBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyOk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareToBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uni", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "work", data: BytesLike): Result;

  events: {
    "AddShare(uint256,uint256)": EventFragment;
    "Liquidate(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reinvest(address,uint256,uint256)": EventFragment;
    "RemoveShare(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddShare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reinvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveShare"): EventFragment;
}

export class UniswapGoblin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UniswapGoblinInterface;

  functions: {
    addStrat(overrides?: CallOverrides): Promise<[string]>;

    "addStrat()"(overrides?: CallOverrides): Promise<[string]>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fToken(overrides?: CallOverrides): Promise<[string]>;

    "fToken()"(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liqStrat(overrides?: CallOverrides): Promise<[string]>;

    "liqStrat()"(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    "operator()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recover(address,address,uint256)"(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reinvest(overrides?: Overrides): Promise<ContractTransaction>;

    "reinvest()"(overrides?: Overrides): Promise<ContractTransaction>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reinvestBountyBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReinvestBountyBps(uint256)"(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    "staking()"(overrides?: CallOverrides): Promise<[string]>;

    totalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uni(overrides?: CallOverrides): Promise<[string]>;

    "uni()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  addStrat(overrides?: CallOverrides): Promise<string>;

  "addStrat()"(overrides?: CallOverrides): Promise<string>;

  balanceToShare(
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceToShare(uint256)"(
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fToken(overrides?: CallOverrides): Promise<string>;

  "fToken()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getMktSellAmount(
    aIn: BigNumberish,
    rIn: BigNumberish,
    rOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMktSellAmount(uint256,uint256,uint256)"(
    aIn: BigNumberish,
    rIn: BigNumberish,
    rOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "health(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liqStrat(overrides?: CallOverrides): Promise<string>;

  "liqStrat()"(overrides?: CallOverrides): Promise<string>;

  liquidate(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  okStrats(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "okStrats(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operator(overrides?: CallOverrides): Promise<string>;

  "operator()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recover(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recover(address,address,uint256)"(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reinvest(overrides?: Overrides): Promise<ContractTransaction>;

  "reinvest()"(overrides?: Overrides): Promise<ContractTransaction>;

  reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

  "reinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setCriticalStrategies(
    _addStrat: string,
    _liqStrat: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCriticalStrategies(address,address)"(
    _addStrat: string,
    _liqStrat: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReinvestBountyBps(
    _reinvestBountyBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReinvestBountyBps(uint256)"(
    _reinvestBountyBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategyOk(
    strats: string[],
    isOk: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategyOk(address[],bool)"(
    strats: string[],
    isOk: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToBalance(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "shareToBalance(uint256)"(
    share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "shares(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  staking(overrides?: CallOverrides): Promise<string>;

  "staking()"(overrides?: CallOverrides): Promise<string>;

  totalShare(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uni(overrides?: CallOverrides): Promise<string>;

  "uni()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  work(
    id: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "work(uint256,address,uint256,bytes)"(
    id: BigNumberish,
    user: string,
    debt: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addStrat(overrides?: CallOverrides): Promise<string>;

    "addStrat()"(overrides?: CallOverrides): Promise<string>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fToken(overrides?: CallOverrides): Promise<string>;

    "fToken()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liqStrat(overrides?: CallOverrides): Promise<string>;

    "liqStrat()"(overrides?: CallOverrides): Promise<string>;

    liquidate(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operator(overrides?: CallOverrides): Promise<string>;

    "operator()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recover(address,address,uint256)"(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    "reinvest()"(overrides?: CallOverrides): Promise<void>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "reinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReinvestBountyBps(uint256)"(
      _reinvestBountyBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<string>;

    "staking()"(overrides?: CallOverrides): Promise<string>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uni(overrides?: CallOverrides): Promise<string>;

    "uni()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddShare(id: BigNumberish | null, share: null): EventFilter;

    Liquidate(id: BigNumberish | null, wad: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Reinvest(caller: string | null, reward: null, bounty: null): EventFilter;

    RemoveShare(id: BigNumberish | null, share: null): EventFilter;
  };

  estimateGas: {
    addStrat(overrides?: CallOverrides): Promise<BigNumber>;

    "addStrat()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    health(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liqStrat(overrides?: CallOverrides): Promise<BigNumber>;

    "liqStrat()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    okStrats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    "operator()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recover(address,address,uint256)"(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reinvest(overrides?: Overrides): Promise<BigNumber>;

    "reinvest()"(overrides?: Overrides): Promise<BigNumber>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<BigNumber>;

    "reinvestBountyBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReinvestBountyBps(uint256)"(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shares(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    "staking()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uni(overrides?: CallOverrides): Promise<BigNumber>;

    "uni()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStrat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addStrat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToShare(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceToShare(uint256)"(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMktSellAmount(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMktSellAmount(uint256,uint256,uint256)"(
      aIn: BigNumberish,
      rIn: BigNumberish,
      rOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    health(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "health(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liqStrat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liqStrat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    okStrats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "okStrats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recover(address,address,uint256)"(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reinvest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reinvestBountyBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reinvestBountyBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCriticalStrategies(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCriticalStrategies(address,address)"(
      _addStrat: string,
      _liqStrat: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReinvestBountyBps(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReinvestBountyBps(uint256)"(
      _reinvestBountyBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategyOk(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategyOk(address[],bool)"(
      strats: string[],
      isOk: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToBalance(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shareToBalance(uint256)"(
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shares(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "staking()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uni(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    work(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "work(uint256,address,uint256,bytes)"(
      id: BigNumberish,
      user: string,
      debt: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
