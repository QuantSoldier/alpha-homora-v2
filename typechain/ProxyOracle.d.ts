/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProxyOracleInterface extends ethers.utils.Interface {
  functions: {
    "acceptGovernor()": FunctionFragment;
    "asETHBorrow(address,uint256)": FunctionFragment;
    "asETHCollateral(address,uint256,uint256)": FunctionFragment;
    "convertForLiquidation(address,address,uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "setOracles(address[],tuple[])": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setWhitelistERC1155(address[],bool)": FunctionFragment;
    "support(address,uint256)": FunctionFragment;
    "unsetOracles(address[])": FunctionFragment;
    "whitelistERC1155(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "asETHBorrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "asETHCollateral",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertForLiquidation",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracles",
    values: [
      string[],
      {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistERC1155",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "support",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetOracles",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistERC1155",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asETHBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asETHCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsetOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistERC1155",
    data: BytesLike
  ): Result;

  events: {
    "SetOracle(address,tuple)": EventFragment;
    "SetWhitelist(address,bool)": EventFragment;
    "UnsetOracle(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnsetOracle"): EventFragment;
}

export class ProxyOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProxyOracleInterface;

  functions: {
    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        borrowFactor: number;
        collateralFactor: number;
        liqIncentive: number;
      }
    >;

    "oracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        borrowFactor: number;
        collateralFactor: number;
        liqIncentive: number;
      }
    >;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    "pendingGovernor()"(overrides?: CallOverrides): Promise<[string]>;

    setOracles(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracles(address[],tuple[])"(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _pendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelistERC1155(address[],bool)"(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unsetOracles(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsetOracles(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelistERC1155(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whitelistERC1155(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  asETHBorrow(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "asETHBorrow(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  asETHCollateral(
    token: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "asETHCollateral(address,uint256,uint256)"(
    token: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertForLiquidation(
    tokenIn: string,
    tokenOut: string,
    tokenOutId: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertForLiquidation(address,address,uint256,uint256)"(
    tokenIn: string,
    tokenOut: string,
    tokenOutId: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  oracles(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      borrowFactor: number;
      collateralFactor: number;
      liqIncentive: number;
    }
  >;

  "oracles(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      borrowFactor: number;
      collateralFactor: number;
      liqIncentive: number;
    }
  >;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  "pendingGovernor()"(overrides?: CallOverrides): Promise<string>;

  setOracles(
    tokens: string[],
    info: {
      borrowFactor: BigNumberish;
      collateralFactor: BigNumberish;
      liqIncentive: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracles(address[],tuple[])"(
    tokens: string[],
    info: {
      borrowFactor: BigNumberish;
      collateralFactor: BigNumberish;
      liqIncentive: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _pendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _pendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelistERC1155(
    tokens: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelistERC1155(address[],bool)"(
    tokens: string[],
    ok: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  support(
    token: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "support(address,uint256)"(
    token: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unsetOracles(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsetOracles(address[])"(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelistERC1155(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelistERC1155(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        borrowFactor: number;
        collateralFactor: number;
        liqIncentive: number;
      }
    >;

    "oracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        borrowFactor: number;
        collateralFactor: number;
        liqIncentive: number;
      }
    >;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    "pendingGovernor()"(overrides?: CallOverrides): Promise<string>;

    setOracles(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracles(address[],tuple[])"(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _pendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWhitelistERC1155(address[],bool)"(
      tokens: string[],
      ok: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unsetOracles(tokens: string[], overrides?: CallOverrides): Promise<void>;

    "unsetOracles(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistERC1155(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "whitelistERC1155(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    SetOracle(token: null, info: null): EventFilter;

    SetWhitelist(token: null, ok: null): EventFilter;

    UnsetOracle(token: null): EventFilter;
  };

  estimateGas: {
    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "oracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setOracles(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracles(address[],tuple[])"(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _pendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWhitelistERC1155(address[],bool)"(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsetOracles(tokens: string[], overrides?: Overrides): Promise<BigNumber>;

    "unsetOracles(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelistERC1155(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistERC1155(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingGovernor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOracles(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracles(address[],tuple[])"(
      tokens: string[],
      info: {
        borrowFactor: BigNumberish;
        collateralFactor: BigNumberish;
        liqIncentive: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _pendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _pendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelistERC1155(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelistERC1155(address[],bool)"(
      tokens: string[],
      ok: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsetOracles(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsetOracles(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelistERC1155(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistERC1155(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
