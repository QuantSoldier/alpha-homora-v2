/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOracleInterface extends ethers.utils.Interface {
  functions: {
    "asETHBorrow(address,uint256)": FunctionFragment;
    "asETHCollateral(address,uint256,uint256)": FunctionFragment;
    "convertForLiquidation(address,address,uint256,uint256)": FunctionFragment;
    "support(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "asETHBorrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "asETHCollateral",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertForLiquidation",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "support",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "asETHBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asETHCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;

  events: {};
}

export class IOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOracleInterface;

  functions: {
    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  asETHBorrow(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "asETHBorrow(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  asETHCollateral(
    token: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "asETHCollateral(address,uint256,uint256)"(
    token: string,
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertForLiquidation(
    tokenIn: string,
    tokenOut: string,
    tokenOutId: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertForLiquidation(address,address,uint256,uint256)"(
    tokenIn: string,
    tokenOut: string,
    tokenOutId: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  support(
    token: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "support(address,uint256)"(
    token: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    asETHBorrow(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "asETHBorrow(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    asETHCollateral(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "asETHCollateral(address,uint256,uint256)"(
      token: string,
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertForLiquidation(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertForLiquidation(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      tokenOutId: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    support(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "support(address,uint256)"(
      token: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
