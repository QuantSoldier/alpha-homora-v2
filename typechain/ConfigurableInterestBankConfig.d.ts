/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ConfigurableInterestBankConfigInterface
  extends ethers.utils.Interface {
  functions: {
    "acceptDebt(address)": FunctionFragment;
    "getInterestRate(uint256,uint256)": FunctionFragment;
    "getKillBps()": FunctionFragment;
    "getReservePoolBps()": FunctionFragment;
    "goblins(address)": FunctionFragment;
    "interestModel()": FunctionFragment;
    "isGoblin(address)": FunctionFragment;
    "killFactor(address,uint256)": FunctionFragment;
    "minDebtSize()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGoblins(address[],address[])": FunctionFragment;
    "setParams(uint256,uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "workFactor(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getInterestRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKillBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservePoolBps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "goblins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "interestModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isGoblin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "killFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGoblins",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "workFactor",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKillBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReservePoolBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goblins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGoblin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killFactor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDebtSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGoblins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workFactor", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ConfigurableInterestBankConfig extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ConfigurableInterestBankConfigInterface;

  functions: {
    acceptDebt(goblin: string, overrides?: CallOverrides): Promise<[boolean]>;

    "acceptDebt(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKillBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getKillBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReservePoolBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    goblins(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "goblins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    interestModel(overrides?: CallOverrides): Promise<[string]>;

    "interestModel()"(overrides?: CallOverrides): Promise<[string]>;

    isGoblin(goblin: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isGoblin(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "killFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minDebtSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setGoblins(
      addrs: string[],
      configs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGoblins(address[],address[])"(
      addrs: string[],
      configs: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setParams(uint256,uint256,uint256,address)"(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    workFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "workFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acceptDebt(goblin: string, overrides?: CallOverrides): Promise<boolean>;

  "acceptDebt(address)"(
    goblin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getInterestRate(
    debt: BigNumberish,
    floating: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getInterestRate(uint256,uint256)"(
    debt: BigNumberish,
    floating: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

  "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  goblins(arg0: string, overrides?: CallOverrides): Promise<string>;

  "goblins(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  interestModel(overrides?: CallOverrides): Promise<string>;

  "interestModel()"(overrides?: CallOverrides): Promise<string>;

  isGoblin(goblin: string, overrides?: CallOverrides): Promise<boolean>;

  "isGoblin(address)"(
    goblin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killFactor(
    goblin: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "killFactor(address,uint256)"(
    goblin: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

  "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setGoblins(
    addrs: string[],
    configs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGoblins(address[],address[])"(
    addrs: string[],
    configs: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setParams(
    _minDebtSize: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _interestModel: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setParams(uint256,uint256,uint256,address)"(
    _minDebtSize: BigNumberish,
    _reservePoolBps: BigNumberish,
    _killBps: BigNumberish,
    _interestModel: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  workFactor(
    goblin: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "workFactor(address,uint256)"(
    goblin: string,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptDebt(goblin: string, overrides?: CallOverrides): Promise<boolean>;

    "acceptDebt(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    goblins(arg0: string, overrides?: CallOverrides): Promise<string>;

    "goblins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    interestModel(overrides?: CallOverrides): Promise<string>;

    "interestModel()"(overrides?: CallOverrides): Promise<string>;

    isGoblin(goblin: string, overrides?: CallOverrides): Promise<boolean>;

    "isGoblin(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setGoblins(
      addrs: string[],
      configs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setGoblins(address[],address[])"(
      addrs: string[],
      configs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setParams(uint256,uint256,uint256,address)"(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    acceptDebt(goblin: string, overrides?: CallOverrides): Promise<BigNumber>;

    "acceptDebt(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKillBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getKillBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePoolBps(overrides?: CallOverrides): Promise<BigNumber>;

    "getReservePoolBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    goblins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "goblins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestModel(overrides?: CallOverrides): Promise<BigNumber>;

    "interestModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    isGoblin(goblin: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGoblin(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "killFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDebtSize(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setGoblins(
      addrs: string[],
      configs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGoblins(address[],address[])"(
      addrs: string[],
      configs: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setParams(uint256,uint256,uint256,address)"(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    workFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDebt(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "acceptDebt(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRate(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInterestRate(uint256,uint256)"(
      debt: BigNumberish,
      floating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKillBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getKillBps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReservePoolBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReservePoolBps()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goblins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "goblins(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestModel()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGoblin(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGoblin(address)"(
      goblin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "killFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDebtSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minDebtSize()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setGoblins(
      addrs: string[],
      configs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGoblins(address[],address[])"(
      addrs: string[],
      configs: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setParams(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setParams(uint256,uint256,uint256,address)"(
      _minDebtSize: BigNumberish,
      _reservePoolBps: BigNumberish,
      _killBps: BigNumberish,
      _interestModel: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    workFactor(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workFactor(address,uint256)"(
      goblin: string,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
