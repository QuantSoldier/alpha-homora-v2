/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC20KP3ROracleInterface extends ethers.utils.Interface {
  functions: {
    "MAX_TWAP_TIME()": FunctionFragment;
    "MIN_TWAP_TIME()": FunctionFragment;
    "currentPx0Cumu(address)": FunctionFragment;
    "currentPx1Cumu(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getETHPx(address)": FunctionFragment;
    "kp3r()": FunctionFragment;
    "price0TWAP(address)": FunctionFragment;
    "price1TWAP(address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_TWAP_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TWAP_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPx0Cumu",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPx1Cumu",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "getETHPx", values: [string]): string;
  encodeFunctionData(functionFragment: "kp3r", values?: undefined): string;
  encodeFunctionData(functionFragment: "price0TWAP", values: [string]): string;
  encodeFunctionData(functionFragment: "price1TWAP", values: [string]): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_TWAP_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TWAP_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPx0Cumu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPx1Cumu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getETHPx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kp3r", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price0TWAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price1TWAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class ERC20KP3ROracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC20KP3ROracleInterface;

  functions: {
    MAX_TWAP_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_TWAP_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TWAP_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MIN_TWAP_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPx0Cumu(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { px0Cumu: BigNumber }>;

    "currentPx0Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { px0Cumu: BigNumber }>;

    currentPx1Cumu(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { px1Cumu: BigNumber }>;

    "currentPx1Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { px1Cumu: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getETHPx(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getETHPx(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kp3r(overrides?: CallOverrides): Promise<[string]>;

    "kp3r()"(overrides?: CallOverrides): Promise<[string]>;

    price0TWAP(pair: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "price0TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    price1TWAP(pair: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "price1TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_TWAP_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_TWAP_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TWAP_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_TWAP_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentPx0Cumu(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

  "currentPx0Cumu(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPx1Cumu(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

  "currentPx1Cumu(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getETHPx(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getETHPx(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kp3r(overrides?: CallOverrides): Promise<string>;

  "kp3r()"(overrides?: CallOverrides): Promise<string>;

  price0TWAP(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

  "price0TWAP(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  price1TWAP(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

  "price1TWAP(address)"(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_TWAP_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TWAP_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TWAP_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_TWAP_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPx0Cumu(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "currentPx0Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPx1Cumu(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "currentPx1Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getETHPx(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getETHPx(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kp3r(overrides?: CallOverrides): Promise<string>;

    "kp3r()"(overrides?: CallOverrides): Promise<string>;

    price0TWAP(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "price0TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price1TWAP(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "price1TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_TWAP_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TWAP_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TWAP_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_TWAP_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentPx0Cumu(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "currentPx0Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPx1Cumu(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "currentPx1Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getETHPx(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getETHPx(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kp3r(overrides?: CallOverrides): Promise<BigNumber>;

    "kp3r()"(overrides?: CallOverrides): Promise<BigNumber>;

    price0TWAP(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "price0TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price1TWAP(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    "price1TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TWAP_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_TWAP_TIME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TWAP_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MIN_TWAP_TIME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPx0Cumu(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentPx0Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPx1Cumu(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentPx1Cumu(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETHPx(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getETHPx(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kp3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kp3r()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price0TWAP(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "price0TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price1TWAP(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "price1TWAP(address)"(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
