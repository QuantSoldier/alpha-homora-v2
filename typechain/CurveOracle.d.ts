/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CurveOracleInterface extends ethers.utils.Interface {
  functions: {
    "base()": FunctionFragment;
    "getETHPx(address)": FunctionFragment;
    "poolOf(address)": FunctionFragment;
    "registerPool(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "ulTokens(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(functionFragment: "getETHPx", values: [string]): string;
  encodeFunctionData(functionFragment: "poolOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ulTokens",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getETHPx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ulTokens", data: BytesLike): Result;

  events: {};
}

export class CurveOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CurveOracleInterface;

  functions: {
    base(overrides?: CallOverrides): Promise<[string]>;

    "base()"(overrides?: CallOverrides): Promise<[string]>;

    getETHPx(lp: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getETHPx(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolOf(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "poolOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerPool(
      lp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerPool(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { decimals: number; token: string }>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { decimals: number; token: string }>;
  };

  base(overrides?: CallOverrides): Promise<string>;

  "base()"(overrides?: CallOverrides): Promise<string>;

  getETHPx(lp: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getETHPx(address)"(
    lp: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  "poolOf(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  registerPool(lp: string, overrides?: Overrides): Promise<ContractTransaction>;

  "registerPool(address)"(
    lp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  ulTokens(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string] & { decimals: number; token: string }>;

  "ulTokens(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string] & { decimals: number; token: string }>;

  callStatic: {
    base(overrides?: CallOverrides): Promise<string>;

    "base()"(overrides?: CallOverrides): Promise<string>;

    getETHPx(lp: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getETHPx(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    "poolOf(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    registerPool(lp: string, overrides?: CallOverrides): Promise<void>;

    "registerPool(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { decimals: number; token: string }>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string] & { decimals: number; token: string }>;
  };

  filters: {};

  estimateGas: {
    base(overrides?: CallOverrides): Promise<BigNumber>;

    "base()"(overrides?: CallOverrides): Promise<BigNumber>;

    getETHPx(lp: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getETHPx(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPool(lp: string, overrides?: Overrides): Promise<BigNumber>;

    "registerPool(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "base()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETHPx(
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getETHPx(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPool(
      lp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerPool(address)"(
      lp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ulTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ulTokens(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
